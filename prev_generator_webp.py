import subprocess
import random
import os
import glob
from PIL import Image

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
def get_video_duration(filename):
    result = subprocess.run(
        ['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', filename],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    return float(result.stdout)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è WebP –∞–Ω–∏–º–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def create_webp_preview(filename, output_webp, clip_count=4, total_duration=4):
    video_duration = get_video_duration(filename)
    clip_duration = total_duration / clip_count

    temp_files = []

    for i in range(clip_count):
        start_time = random.uniform(0, max(0, video_duration - clip_duration))
        temp_file = f'temp_clip_{i}.mp4'
        temp_files.append(temp_file)

        # –í—ã—Ä–µ–∑–∞–µ–º –æ—Ç—Ä—ã–≤–æ–∫ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ 720p –∏ –±–µ–∑ –ø–æ—Ç–µ—Ä—å
        subprocess.run([
            'ffmpeg', '-ss', str(start_time), '-t', str(clip_duration), '-i', filename, 
            '-vf', 'scale=720:-2', '-c:v', 'libx264', '-crf', '0', '-c:a', 'copy', '-y', temp_file
        ])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç—Ä—ã–≤–∫–∏
    with open('inputs.txt', 'w') as f:
        for temp_file in temp_files:
            f.write(f"file '{temp_file}'\n")

    concat_file = 'concat.mp4'
    subprocess.run([
        'ffmpeg', '-f', 'concat', '-safe', '0', '-i', 'inputs.txt', '-c:v', 'libx264', '-crf', '0', '-c:a', 'copy', '-y', concat_file
    ])

    # –°–æ–∑–¥–∞—ë–º WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ —Ä–∞–∑–º–µ—Ä–∞
    subprocess.run([
        'ffmpeg', '-i', concat_file, '-c:v', 'libwebp', 
        '-lossless', '1', '-compression_level', '6', '-method', '6',
        '-vf', 'fps=15', '-loop', '0', '-preset', 'default', 
        '-f', 'webp', '-an', '-y', output_webp
    ])

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for temp_file in temp_files:
        if os.path.exists(temp_file):
            os.remove(temp_file)
    if os.path.exists('inputs.txt'):
        os.remove('inputs.txt')
    if os.path.exists(concat_file):
        os.remove(concat_file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
def convert_all_videos_to_webp(folder_path='.', clip_count=4, total_duration=4):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ MP4 –∏ MOV —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –≤ WebP –∞–Ω–∏–º–∞—Ü–∏–∏
    
    Args:
        folder_path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)
        clip_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
        total_duration: –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MP4 –∏ MOV —Ñ–∞–π–ª—ã
    video_extensions = ['*.mp4', '*.MP4', '*.mov', '*.MOV']
    video_files = []
    
    for extension in video_extensions:
        pattern = os.path.join(folder_path, '**', extension)
        video_files.extend(glob.glob(pattern, recursive=True))
    
    if not video_files:
        print(f"–í –ø–∞–ø–∫–µ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ (.mp4, .mov)")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    
    for i, video_file in enumerate(video_files, 1):
        print(f"\n[{i}/{len(video_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {video_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_name, file_ext = os.path.splitext(video_file)
        output_webp = f"{file_name}_preview.webp"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if os.path.exists(output_webp):
            print(f"–§–∞–π–ª {output_webp} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue
        
        try:
            create_webp_preview(video_file, output_webp, clip_count, total_duration)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω WebP: {output_webp}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_file}: {str(e)}")
    
    print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é PIL
def create_static_with_pil(folder_path='.'):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö WebP —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è PIL
    """
    try:
        from PIL import Image
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow –∫–æ–º–∞–Ω–¥–æ–π: pip install Pillow")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ WebP —Ñ–∞–π–ª—ã
    webp_pattern = os.path.join(folder_path, '**', '*.webp')
    webp_files = glob.glob(webp_pattern, recursive=True)
    
    if not webp_files:
        print(f"–í –ø–∞–ø–∫–µ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ WebP —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(webp_files)} WebP —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—Ä—Å–∏–π —Å PIL:")
    
    for i, webp_file in enumerate(webp_files, 1):
        print(f"\n[{i}/{len(webp_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {webp_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_name, file_ext = os.path.splitext(webp_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º
        if '_static' in file_name:
            print(f"–§–∞–π–ª {webp_file} —É–∂–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue
        
        output_webp = f"{file_name}_static.webp"
        output_png = f"{file_name}_static.png"
        output_jpg = f"{file_name}_static.jpg"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã
        if os.path.exists(output_webp) or os.path.exists(output_png) or os.path.exists(output_jpg):
            print(f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebP —Ñ–∞–π–ª
            with Image.open(webp_file) as img:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
                first_frame = img.copy()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç—Ä–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                
                # WebP (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π)
                first_frame.save(output_webp, 'WEBP', quality=100, lossless=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π WebP: {output_webp}")
                
                # PNG (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                first_frame.save(output_png, 'PNG', optimize=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π PNG: {output_png}")
                
                # JPG (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                if first_frame.mode in ('RGBA', 'LA', 'P'):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è JPG
                    rgb_img = Image.new('RGB', first_frame.size, (255, 255, 255))
                    if first_frame.mode == 'P':
                        first_frame = first_frame.convert('RGBA')
                    rgb_img.paste(first_frame, mask=first_frame.split()[-1] if first_frame.mode in ('RGBA', 'LA') else None)
                    first_frame = rgb_img
                
                first_frame.save(output_jpg, 'JPEG', quality=95, optimize=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π JPG: {output_jpg}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PIL –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {webp_file}: {str(e)}")
            # –ï—Å–ª–∏ PIL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            try:
                print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ imageio...")
                import imageio
                reader = imageio.get_reader(webp_file)
                first_frame = reader.get_data(0)
                imageio.imwrite(output_png, first_frame)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω PNG —á–µ—Ä–µ–∑ imageio: {output_png}")
            except ImportError:
                print("‚ùå –î–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install imageio")
            except Exception as e2:
                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e2)}")
    
    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def convert_videos_by_categories():
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    categories = ['3d & full cgi', 'ai', 'vfx', '—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏', '–ø–æ—Å—Ç-–ø—Ä–æ–¥–∞–∫—à–Ω']
    
    for category in categories:
        if os.path.exists(category):
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
            convert_all_videos_to_webp(category)
        else:
            print(f"üìÅ –ü–∞–ø–∫–∞ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def create_static_by_categories():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    categories = ['3d & full cgi', 'ai', 'vfx', '—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏', '–ø–æ—Å—Ç-–ø—Ä–æ–¥–∞–∫—à–Ω']
    
    for category in categories:
        if os.path.exists(category):
            print(f"\nüìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            create_static_with_pil(category)
        else:
            print(f"üìÅ –ü–∞–ø–∫–∞ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

# 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
# create_webp_preview('input.mp4', 'input_preview.webp', clip_count=4, total_duration=4)

# 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ:
# convert_all_videos_to_webp('.')

# 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ:
convert_all_videos_to_webp('./tst')

# 4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
# convert_videos_by_categories()

# 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ WebP:
create_static_with_pil('./tst')

# 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
# create_static_by_categories()
